
// This file is generated by bin/converter.ts Please do not update this file directly


export type ContentMeta = {    
    "title-en": string;
    "title-id": string;
    tags: string[];
    thumbnail: string;
    date: string;
    "summary-en"?: string;
    "summary-id"?: string;
    cover?: string
}

export type Content = {
    blog: {
        id: Record<string, string>
        en: Record<string, string>
        meta: Record<string, ContentMeta>
    }
    "about-en.md": string
    "about-id.md": string
}


export const markdownContents: Content = {
  "blog": {
    "id": {
      "ya-blogging-website.md": "<p>Aku udah buat 3 website blogging buat personal. Semuanya dipake aja sulit, apa lagi di maintain. Semoga website ini jadi website blogging terakhir yang akan-ku buat.</p>\n<h1>Apa yang salah sebelumnya</h1>\n<p>Pertama-tama, infrastrukturnya terlalu kompleks, ada database, WYSWYG editor buat markdownnya, bahkan ada authentikasi juga (padahal yang make buat sendiri). Kebanyakan &quot;fitur&quot; juga gak dibuat secara benar dan gak nambah &quot;value&quot; buat website blogging sendiri. </p>\n<p>Lalu, teknologi yang digunakan itu baru ku pake dan juga kurang populer, yang berarti kurang juga support komunitasnya, dan biasanya berakhir dengan ngebuat fitur sendiri dari awal. Teknologi-teknologi ini bukannya jelek, tapi emang yang pakenya aja skill issue. Seharusnya fitur-fitur yang diinginkan bisa dibuat dengan benar bahkan dengan keterbatasan diatas.</p>\n<p>Semoga dengan pengalaman diatas, Projek ini tidak jatuh ke lubang kesalahan yang sama.</p>\n<h1>Tujuan, teknologi, dan limitasi</h1>\n<p>Fitur yang didesain harus se-simple mungkin. Tujuan utama dari blog ini adalah</p>\n<ul>\n<li>Memperlihatkan blog yang ditulis dalam bentuk markdown.</li>\n<li>Memperlihatkan list blog yang sudah ditulis dalam bentuk grid.</li>\n<li>Mendukung 2 bahasa, yaitu indonesia dan inggris.</li>\n</ul>\n<p>Untuk teknologi, deployment akan dilakukan di <a href=\"https://deno.com/deploy\">Deno Deploy</a> sebagai cara utama untuk hosting projek ini. Yang berarti, projek ini harus menggunakan ekosistemnya deno sendiri. Terutama javascript runtime bernama <a href=\"https://deno.com/\">Deno</a>. Ya walaupun katanya Deno Deploy sudah support menggunakan ekosistem nodejs, tapi akan lebih baik main aman saja. </p>\n<p>Untuk webserver, selain menggunakan standard library dari Deno sendiri, <a href=\"https://hono.dev/\">Hono</a> adalah framework yang dapat diandalkan. Dia juga bisa jalan atas runtime lain - bahkan di <a href=\"https://workers.cloudflare.com/\">cloudflare workers</a>. Tidak seperti web server lain, Hono bisa support render JSX dan bahkan support <em>client side rendering</em> (Walaupun sebenernya aku sendiri gak pernah berhasil buat makenya). Ini membuat hono salah satu frameowrk terbaik untuk digunakan.</p>\n<p>Dulu, Deno punya cara me-manage package nya sendiri, yang bisa dibilang agak sulit dipakai. Support untuk NPM juga kurang bisa diandalkan. Tapi seakrang, tim nya Deno membuat <a href=\"http://jsr.io/\">JSR</a> yang merupakan registry seperti NPM dengan tujuan utama menghosting package yang bisa berjalan di runtime apapun. Dia juga support NPM package, yang mendorong Deno sendiri agar support NPM nya lebih baik. Aku sendiri mendukung gerakan ini karena sekarang, runtime javascript udah gak bisa hitung dengan jari lagi (NodeJS, Deno, Bun, Serverless dan Edge runtime dan masi banyak lagi)</p>\n<p>Dengan teknologi-teknologi ini, Arah dari projek ini menjadi jelas: agar <strong>portable yang dapat dijalankan di berbagai runtime</strong>. Tentu saja hal ini ada kelebihan dak kekurangan - Tapi paling tidak, arah ini memudahkan untuk memilih librarie atau pratices yang akan di gunakan (atau dihindari).\nUntuk mendukung tujuan ini, ada beberapa peraturan yang harus ikuti: </p>\n<ol>\n<li>Hindari menggunakan native api dari node.js.</li>\n<li>Jangan menggunakan filesystem.</li>\n<li>Hanya menggunakan package dari JSR (jika bisa).</li>\n</ol>\n<p>Artinya, akan ada <em>build step</em> dan <em>preprocessing</em>. Yang termasuk <a href=\"https://tailwindcss.com/\">tailwind</a> untuk melakukan styling.</p>\n<h1>Hasilnya</h1>\n<p>Website ini adalah hasil dari pendekatan diatas. Mungkin agak berbeda dari website blogging pada umumnnya, tapi sudah cukup oke menurutku. Terutama karena aku tau cara kerja website ini, memungkinkan untuk menambahkan fitur keren lainnya.</p>\n"
    },
    "meta": {
      "ya-blogging-website.json": {
        "title-en": "Yet another blogging website",
        "title-id": "Website blogging terakhir",
        "tags": [
          "Programming"
        ],
        "thumbnail": "ya-blogging-page.png",
        "date": "2025-05-11",
        "summary-en": "Created another personal blogging website, for real this time.",
        "summary-id": "Membuat website blogging, semoga yang ini awet"
      }
    },
    "en": {
      "ya-blogging-website.md": "<p>I&#39;ve built three personal blogging websites so far—each one ended up being either too difficult to set up or too cumbersome to use. Hopefully, this next iteration will finally get it right.</p>\n<h1>What Went Wrong with the Previous Iterations</h1>\n<p>First, the infrastructure was far too complex. They relied on a database, a WYSIWYG markdown editor, and even included an authentication workflow. Most of these were poorly implemented—slowing down development and eating up a lot of my time. Worse, these so-called &quot;features&quot; didn’t even add real value to the core purpose of a blog.</p>\n<p>Then, I used a bizarre mix of technologies I had barely touched before. Not that these technologies were inherently bad—but combining advanced features with tools that had minimal community support made it feel like I was reinventing the wheel. In hindsight, it was more of a skill issue on my part. With the right experience, those features could definitely be implemented properly.</p>\n<p>Hopefully with that experience. This project won&#39;t go fall to the same pitfalls that as the previous ones. </p>\n<h1>Goals, technologies, and limitation</h1>\n<p>As for the features, i will try to make it simple. Even if a feature ends up being somewhat complex, i&#39;ll try to make it robust and reliable. My goal is to have blogging website that can:</p>\n<ul>\n<li>Display blog post written in markdown files.</li>\n<li>Show the list of blog post in grid layout.</li>\n<li>Support 2 languages, which is English and Indonesian.</li>\n</ul>\n<p>As for the technologies, i will choose <a href=\"https://deno.com/deploy\">Deno Deploy</a> as the primary way to host this project. This decision effectively locked me to deno ecosystem. Especially the <a href=\"https://deno.com/\">Deno</a> javascript runtime, while they claim that they support Node.js these days, I don&#39;t buy it and choose to play it safe by sticking to native tools. </p>\n<p>Beside the standard library they have, <a href=\"https://hono.dev/\">Hono</a> were the most reliable framework to use. It also works in different runtime - even in <a href=\"https://workers.cloudflare.com/\">cloudflare workers</a>. Unlike the other frameworks that rely on templating engine like mustache, Hono is capable of rendering JSX and even support client side rendering (though i haven&#39;t be able to get CSR to works myself). This make Hono very pleasant to work with.</p>\n<p>In the past, Deno had its own package registry and management system, which is awkward to use. The npm support were also poor in my experience. Things have been improved since they created another registry called <a href=\"http://jsr.io/\">JSR</a> that is a registry that aim to host package that works with any runtime. It also compatible with NPM packages, which pushes deno itself to maintain compability with NPM packages. I personally support this push of cross runtime library because as you know. We can&#39;t even track the count the number of javascript runtime by hand anymore.</p>\n<p>With these core technologies in place, now the project finally has a clear direction: to be <strong>easily portable to across diferent runtime</strong>. Of course, this come with set of trade-off and limitation - But at the very least its give me solid guideline for what libraries and practices to adopt (or avoid). To support this goal, i&#39;ve establised a few key rules:</p>\n<ol>\n<li>Avoid using native node.js API.</li>\n<li>Don&#39;t rely on filesystem access.</li>\n<li>Only use JSR as package registry.</li>\n</ol>\n<p>This give us indication to rely on build step and preprocessor approach. Which includes <a href=\"https://tailwindcss.com/\">tailwind</a> as our styling choice.</p>\n<h1>The result</h1>\n<p>This entire website were the result of this approach. It might be not your usual blogging website but im happy with the current state. Besides, It is possible to add a few cool features in the future despite the unsual approach due that i know what actually happened under the hood.</p>\n"
    }
  },
  "about-en.md": "<h1>About me</h1>\n<p>My name is Andi Putra Wijaya. I&#39;m an undergraduate college student currently pursuing diploma on informatics in <a href=\"https://www.polban.ac.id/\">Bandung State Polytechnic</a>. My carreer is mostly related on backend programming using a couple language such as Golang, typescript and php. I also casually program in C usually for fun, usually on non trivial matter.</p>\n<p>This list a personal project</p>\n<ul>\n<li><a href=\"https://github.com/andiputraw/Tandichat\">Tandichat</a>: A whatsapp clone using websocket for real time chat application.</li>\n<li><a href=\"https://github.com/andiputraw/discord-rest-api-sdk\">discord-rest-api-sdk</a>: A wrapper over discord api targeted for discord bot running on serverless (vercel), edge (cloudflare worker) or even browser.</li>\n<li><a href=\"https://github.com/andiputraw/hana-bot\">Hana Bot</a>: A discord bot used to find an information about a hero from Guardian Tales.</li>\n<li><a href=\"https://github.com/andiputraw/slode\">Slode</a>: Work in progress, library to do presentation in web with full power of the browser.</li>\n</ul>\n<p>Feel free to contact me through discord: &quot;andiputraw&quot;, or email me at <a href=\"mailto:andiputraw925@gmail.com\">andiputraw925@gmail.com</a></p>\n",
  "about-id.md": "<h1>Tentang saya</h1>\n<p>Nama saya Andi Putra Wijaya. Saya adalah seorang mahasiswa yang sedang melakukan pendidikan diploma di jurusan informatika di kampus <a href=\"https://www.polban.ac.id/\">Politeknik Negeri Bandung</a>.Karir saya kebanyakan berhubungan dengan Backend Programming menggunakan beberapa bahasa permograman Golang, Typescript dan PHP. Saya juga memprogram di bahasa C secara kasual, biasanya untuk hal yang kurang penting.</p>\n<p>Di bawah ini adalah projek saya</p>\n<ul>\n<li><a href=\"https://github.com/andiputraw/Tandichat\">Tandichat</a>: Klona dari Whatsaap menggunakan websocket untuk melakukan percakapan secara realtime.</li>\n<li><a href=\"https://github.com/andiputraw/discord-rest-api-sdk\">discord-rest-api-sdk</a>: Wrapper untuk api discord yang diperuntukan untuk discord bot yang berjalan di runtime serverless (vercel), edge (cloudflare worker) atau bahkan browser.</li>\n<li><a href=\"https://github.com/andiputraw/hana-bot\">Hana Bot</a>: Bot discord yang memiliki fungsi untuk memberikan informasi mengenaik Hero di game guardian tales.</li>\n<li><a href=\"https://github.com/andiputraw/slode\">Slode</a>: Work in progress, sebuah library untuk melakukan presentasi di web dengan kekuatan penuh browser.</li>\n</ul>\n<p>Untuk kontak, Bisa lewat discord: &quot;andiputraw&quot; atau email <a href=\"mailto:andiputraw925@gmail.com\">andiputraw925@gmail.com</a></p>\n"
}
